<?xml version="1.0" encoding="utf-8"?>
<nugget name="FILE_READER_PART1">
<<<<<<< HEAD
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_XLSX" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_XLSX" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_XLSX" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_XLSX" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 24.12.2014 (watching The Wolf of Wallstreet)
**********************************************************************
METHOD z_if_file_reader_execute~read_file.

  DATA excel TYPE REF TO zcl_excel.
  DATA reader TYPE REF TO zif_excel_reader.

  TRY .

      CREATE OBJECT reader TYPE zcl_excel_reader_2007.

      excel = reader-&gt;load_file( im_filename ).

*  Get the active worksheet
      DATA:
            worksheet      TYPE REF TO zcl_excel_worksheet,
            highest_column TYPE zexcel_cell_column,
            highest_row    TYPE int4,
            column         TYPE zexcel_cell_column VALUE 1,
            col_str        TYPE zexcel_cell_column_alpha,
            row            TYPE int4               VALUE 1,
            value          TYPE zexcel_cell_value.

      worksheet = excel-&gt;get_active_worksheet( ).
      highest_column = worksheet-&gt;get_highest_column( ).
      highest_row    = worksheet-&gt;get_highest_row( ).

*  Let&apos;s get a pointer to a line of the char like table, shall we?
      DATA line_ref TYPE REF TO data.
      CREATE DATA line_ref LIKE LINE OF ch_table.
      FIELD-SYMBOLS &lt;output_line&gt; TYPE any.
      ASSIGN line_ref-&gt;* TO &lt;output_line&gt;.

      FIELD-SYMBOLS &lt;output_field&gt; TYPE any.

      WHILE row &lt;= highest_row.
        WHILE column &lt;= highest_column.

          ASSIGN COMPONENT column OF STRUCTURE &lt;output_line&gt; TO &lt;output_field&gt;.
          IF sy-subrc &lt;&gt; 0.
*        Should we ignore this?? I think so!!
*        RAISE EXCEPTION TYPE zcx_fatal_error.
            EXIT.
          ENDIF.
          col_str = zcl_excel_common=&gt;convert_column2alpha( column ).
          worksheet-&gt;get_cell(
            EXPORTING
              ip_column = col_str
              ip_row    = row
            IMPORTING
              ep_value = value
          ).
          &lt;output_field&gt; = value.
          column = column + 1.
        ENDWHILE.
        column = 1.
        row = row + 1.
        INSERT &lt;output_line&gt; INTO TABLE ch_table.
        CLEAR &lt;output_line&gt;.
      ENDWHILE.

    CATCH zcx_excel.
*        What to do??
      CLEAR ch_table.
  ENDTRY.


ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_XLS" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_XLS" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_XLS" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_XLS" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 23.12.2014 (while watching the final table of the 2014 PCA
*                   Super High Roller)
**********************************************************************
METHOD z_if_file_reader_execute~read_file.

  DATA lr_xls_reader TYPE REF TO zcl_xls_reader.
  DATA localfile TYPE localfile.
  localfile = im_filename.

  TRY.
      lr_xls_reader = zcl_xls_reader=&gt;create_instance( localfile ).
    CATCH zcx_file_reader.
*      Just abort?
      EXIT.
  ENDTRY.

  lr_xls_reader-&gt;read_file(
    CHANGING
      ch_table = ch_table
  ).

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_CSV" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_CSV" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_CSV" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_CSV" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 28.12.2014
**********************************************************************
METHOD z_if_file_reader_execute~read_file.

  DATA lr_csv_reader TYPE REF TO zcl_csv_reader.
  DATA localfile TYPE string.
  lr_csv_reader = zcl_csv_reader=&gt;create_instance( im_filename ).
*    CATCH zcx_no_file_path.  &quot; No file path error
*    CATCH zcx_wrong_extension.  &quot; Wrong file extension

  lr_csv_reader-&gt;read_file(
    EXPORTING
      im_field_separator = im_field_separator
    CHANGING
      ch_table = ch_table
  ).

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_CONV_TEXT" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI: Z_BD_FILE_READER_TYPE_CONV" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_CONV_TEXT" REFCLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_CONV_TEXT" CPDNAME="Z_IF_FILE_READER_TYPE_CONV~CONVERT_TYPE">
   <source>METHOD z_if_file_reader_type_conv~convert_type.

*  Genius, isn&apos;t it?
  ch_value = im_value.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCX_FATAL_ERROR" VERSION="1" LANGU="E" DESCRIPT="Fatal error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_FATAL_ERROR" CMPNAME="ZCX_FATAL_ERROR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Fatal error"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_FATAL_ERROR" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_CONV_DATE" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_CONV_DATE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_CONV_DATE" REFCLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_CONV_DATE" CPDNAME="Z_IF_FILE_READER_TYPE_CONV~CONVERT_TYPE">
   <source>METHOD z_if_file_reader_type_conv~convert_type.

*  Credits for this go to Luís Rocha, greatest
*  Abapper alive

  DATA:
        len_date      TYPE i,
        inv_date(10)  TYPE c,
        int_date      TYPE sydatum.

  inv_date = im_value.

  len_date = strlen( inv_date ).
  IF len_date = 8.

*   Check AAAAMMDD format
    int_date = inv_date.
    CALL FUNCTION &apos;DATE_CHECK_PLAUSIBILITY&apos;
      EXPORTING
        date                      = int_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc &lt;&gt; 0.

*     Check format DDMMAAAA
      CONCATENATE inv_date+4(4) inv_date+2(2) inv_date+0(2)
        INTO inv_date.
      int_date = inv_date.
      CALL FUNCTION &apos;DATE_CHECK_PLAUSIBILITY&apos;
        EXPORTING
          date                      = int_date
        EXCEPTIONS
          plausibility_check_failed = 1
          OTHERS                    = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_conversion_error.
      ENDIF.
    ENDIF.
  ELSE.
    IF inv_date+2(1) NA &apos;0123456789&apos;.

*     Format DD-MM-AAAA
      inv_date+2(1) = space.
      inv_date+5(1) = space.
      CONDENSE inv_date NO-GAPS.
      CONCATENATE inv_date+4(4) inv_date+2(2) inv_date+0(2)
        INTO inv_date.
    ELSE.

*     Format AAAA-MM-DD
      inv_date+4(1) = space.
      inv_date+7(1) = space.
      CONDENSE inv_date NO-GAPS.
    ENDIF.
    int_date = inv_date.
    CALL FUNCTION &apos;DATE_CHECK_PLAUSIBILITY&apos;
      EXPORTING
        date                      = int_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_conversion_error.
    ENDIF.
  ENDIF.

  ch_value = inv_date.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCX_ERROR_READING_FILE" VERSION="1" LANGU="E" DESCRIPT="Error reading the file" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
=======
 <CLAS CLSNAME="ZCL_XLS_READER" VERSION="1" LANGU="E" DESCRIPT="Read an XLS file" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
>>>>>>> origin/master
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
<<<<<<< HEAD
  <attribute CLSNAME="ZCX_ERROR_READING_FILE" CMPNAME="ZCX_ERROR_READING_FILE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Error reading the file"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_ERROR_READING_FILE" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_NO_FILE_PATH" VERSION="1" LANGU="E" DESCRIPT="No file path error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_NO_FILE_PATH" CMPNAME="ZCX_NO_FILE_PATH" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="File name is empty"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_NO_FILE_PATH" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_WRONG_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Wrong file extension" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_WRONG_EXTENSION" CMPNAME="ZCX_WRONG_EXTENSION" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Wrong file extension"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_WRONG_EXTENSION" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_CONV_NUMBER" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_CONV_NUMBER" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_CONV_NUMBER" REFCLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_CONV_NUMBER" CPDNAME="Z_IF_FILE_READER_TYPE_CONV~CONVERT_TYPE">
   <source>METHOD z_if_file_reader_type_conv~convert_type.
=======
  <typeUsage CLSNAME="ZCL_XLS_READER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_XLS_READER" CMPNAME="FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LOCALFILE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_XLS_READER" CMPNAME="XLS_EXT" VERSION="1" LANGU="E" DESCRIPT="XLS extension" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;XLS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" VERSION="1" LANGU="E" DESCRIPT="Create char like table" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="IM_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="RE_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD create_char_like_table.
>>>>>>> origin/master

  CALL FUNCTION &apos;MOVE_CHAR_TO_NUM&apos;
    EXPORTING
      chr    = im_value
    IMPORTING
      num    = ch_value
    EXCEPTIONS
      OTHERS = 4.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
    RAISE EXCEPTION TYPE zcx_conversion_error.
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCX_NOT_A_TABLE" VERSION="1" LANGU="E" DESCRIPT="That&apos;s... not a table" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_NOT_A_TABLE" CMPNAME="ZCX_NOT_A_TABLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="That doesn&apos;t look like a table..."/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_NOT_A_TABLE" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_READER_NOT_IMPLEMENTED" VERSION="1" LANGU="E" DESCRIPT="File reader not implemented for this extension" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_READER_NOT_IMPLEMENTED" CMPNAME="ZCX_READER_NOT_IMPLEMENTED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="File reader not implemented for this extension"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_READER_NOT_IMPLEMENTED" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_FILE_READER" VERSION="1" LANGU="E" DESCRIPT="File reading class exceptions" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_DYNAMIC_CHECK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_FILE_READER" CMPNAME="ZCX_FILE_READER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Error occurred reading file."/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_FILE_READER" REFCLSNAME="CX_DYNAMIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_CONVERSION_ERROR" VERSION="1" LANGU="E" DESCRIPT="Field conversion error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_CONVERSION_ERROR" CMPNAME="ZCX_CONVERSION_ERROR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Field conversion error"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_CONVERSION_ERROR" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCL_XLS_READER" VERSION="1" LANGU="E" DESCRIPT="Read an XLS file" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_XLS_READER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_XLS_READER" CMPNAME="FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="LOCALFILE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_XLS_READER" CMPNAME="XLS_EXT" VERSION="1" LANGU="E" DESCRIPT="XLS extension" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;XLS&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" VERSION="1" LANGU="E" DESCRIPT="Create char like table" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="IM_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="RE_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD create_char_like_table.

  DATA table_descr TYPE REF TO cl_abap_tabledescr.

*  This better not fail... otherwise you&apos;re a douche
  TRY.
      table_descr ?= cl_abap_tabledescr=&gt;describe_by_data( im_table ).
    CATCH cx_root.

      RAISE EXCEPTION TYPE zcx_not_a_table.

  ENDTRY.

  DATA struct_descr TYPE REF TO cl_abap_structdescr.
  struct_descr ?= table_descr-&gt;get_table_line_type( ).

  DATA components TYPE abap_component_tab.
  components = struct_descr-&gt;get_components( ).

*  Now... you may question my &quot;decision&quot; to use CHAR50...
*  So you know what? I&apos;ma put this in a BAdI
*  But this is the type used by FM ALSM_EXCEL_TO_INTERNAL_TABLE
  DATA char_ref TYPE REF TO cl_abap_typedescr.
  TRY.

      DATA badi_col_type TYPE REF TO z_bd_file_reader_col_type.
      GET BADI badi_col_type.
      CALL BADI badi_col_type-&gt;get_char_ref
        RECEIVING
          re_char_ref = char_ref.    &quot; Runtime Type Services

*    Catch multiple implementations... or no implementation at all
    CATCH cx_root.

      char_ref = cl_abap_elemdescr=&gt;describe_by_name( p_name = &apos;CHAR50&apos; ).

  ENDTRY.

  FIELD-SYMBOLS &lt;component&gt; LIKE LINE OF components.
  LOOP AT components ASSIGNING &lt;component&gt;.

    &lt;component&gt;-type ?= char_ref.

  ENDLOOP.

  struct_descr ?= cl_abap_structdescr=&gt;create(
      p_components = components
  ).

  table_descr = cl_abap_tabledescr=&gt;create(
      p_line_type  = struct_descr
  ).

  CREATE DATA re_table TYPE HANDLE table_descr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Create an instance of the reader" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_INSTANCE" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" DESCRIPT="File name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LOCALFILE" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_INSTANCE" SCONAME="RE_XLS_READER" VERSION="1" LANGU="E" DESCRIPT="Read an XLS file" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_XLS_READER"/>
   <exception CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_INSTANCE" SCONAME="ZCX_NO_FILE_PATH" VERSION="1" LANGU="E" DESCRIPT="No file path error" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_XLS_READER" CMPNAME="CREATE_INSTANCE" SCONAME="ZCX_WRONG_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Wrong file extension" MTDTYPE="0" EDITORDER="2 "/>
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 19.12.2014 (at Frankfurt Intl Airport, not even kidding)
**********************************************************************
METHOD create_instance.

  CREATE OBJECT re_xls_reader.

  IF im_filename IS INITIAL.

    DATA: lv_subrc TYPE sy-subrc,
          lt_filetable TYPE filetable,
          ls_filename TYPE file_table.

    cl_gui_frontend_services=&gt;file_open_dialog(
      EXPORTING
        default_extension = &apos;.xls&apos;
        window_title      = &apos;Select File&apos;
        default_filename  = &apos;*.xls&apos;
        multiselection    = &apos; &apos;
        file_filter       = &apos;*.xls&apos;
      CHANGING
        file_table        = lt_filetable
        rc                = lv_subrc ).

    READ TABLE lt_filetable INTO ls_filename INDEX 1.

    re_xls_reader-&gt;filename = ls_filename-filename+0(128).

  ELSE.

    re_xls_reader-&gt;filename = im_filename.

  ENDIF.

  IF re_xls_reader-&gt;filename IS INITIAL.

    RAISE EXCEPTION TYPE zcx_no_file_path.

  ENDIF.

  DATA filename_str TYPE string.
  filename_str = re_xls_reader-&gt;filename.
  IF zcl_xls_reader=&gt;translate_to_upper( zcl_xls_reader=&gt;get_file_extension( filename_str ) ) &lt;&gt; zcl_xls_reader=&gt;xls_ext.

    RAISE EXCEPTION TYPE zcx_wrong_extension.

  ENDIF.

ENDMETHOD.</source>
   <methodDocumentation OBJECT="ZCL_XLS_READER                CREATE_INSTANCE">
    <language SPRAS="E">
     <textLine TDFORMAT="U1" TDLINE="&amp;FUNCTIONALITY&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="This creates an instance of the XLS reader."/>
     <textLine TDFORMAT="U1" TDLINE="&amp;PRECONDITION&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="No precondition really..."/>
     <textLine TDFORMAT="U1" TDLINE="&amp;RESULT&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="You get an instance of the XLS reader!"/>
     <textLine TDFORMAT="U1" TDLINE="&amp;PARAMETERS&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="Importing parameter im_filename is optional. If it is not provided, the"/>
     <textLine TDLINE="user will be prompted for a file to upload."/>
     <textLine TDFORMAT="U1" TDLINE="&amp;EXCEPTIONS&amp;"/>
     <textLine TDFORMAT="AS"/>
     <textLine TDFORMAT="U1" TDLINE="&amp;HINTS&amp;"/>
     <textLine TDFORMAT="AS"/>
    </language>
   </methodDocumentation>
  </method>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="GET_FILE_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Get file extension" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="GET_FILE_EXTENSION" SCONAME="IV_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Filename" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="GET_FILE_EXTENSION" SCONAME="RV_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Extension" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_file_extension.

  DATA lt_result TYPE TABLE OF string.
  SPLIT iv_filename AT &apos;.&apos;
    INTO TABLE lt_result.

  &quot;if only one line, abort mission
  IF lines( lt_result ) &gt; 1.
    READ TABLE lt_result INTO rv_extension
      INDEX lines( lt_result ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" VERSION="1" LANGU="E" DESCRIPT="Populate the char table from excel" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="LOCALFILE"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="IM_SKIP_FIRST_LINE" VERSION="1" LANGU="E" DESCRIPT="Skip first line" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <source>METHOD populate_tab_from_excel.

  DATA lt_raw TYPE truxs_t_text_data.
  CALL FUNCTION &apos;TEXT_CONVERT_XLS_TO_SAP&apos;
    EXPORTING
      i_tab_raw_data       = lt_raw
      i_filename           = im_filename
      i_line_header        = im_skip_first_line
    TABLES
      i_tab_converted_data = ch_table
    EXCEPTIONS
      OTHERS               = 4.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="READ_FILE" VERSION="1" LANGU="E" DESCRIPT="Read the xls file" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
<<<<<<< HEAD
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="READ_FILE" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
=======
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="READ_FILE" SCONAME="IM_SKIP_FIRST_LINE" VERSION="1" LANGU="E" DESCRIPT="Skip first line" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="READ_FILE" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
>>>>>>> origin/master
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 23.12.2014 (while watching Thor... I had seen it already)
**********************************************************************
METHOD read_file.

*  clear the table, just in case
  CLEAR ch_table.

  me-&gt;populate_tab_from_excel(
    EXPORTING
      im_filename = me-&gt;filename    &quot; Local file for upload/download
<<<<<<< HEAD
=======
      im_skip_first_line = im_skip_first_line
>>>>>>> origin/master
    CHANGING
      ch_table    = ch_table
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_XLS_READER" CMPNAME="TRANSLATE_TO_UPPER" VERSION="1" LANGU="E" DESCRIPT="Translate to upper case" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="TRANSLATE_TO_UPPER" SCONAME="IM_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_XLS_READER" CMPNAME="TRANSLATE_TO_UPPER" SCONAME="RE_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD translate_to_upper.

  re_string = im_string.
  TRANSLATE re_string TO UPPER CASE.

ENDMETHOD.</source>
  </method>
<<<<<<< HEAD
=======
 </CLAS>
 <CLAS CLSNAME="ZCX_FILE_READER" VERSION="1" LANGU="E" DESCRIPT="File reading class exceptions" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="CX_DYNAMIC_CHECK">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_FILE_READER" CMPNAME="ZCX_FILE_READER" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Error occurred reading file."/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_FILE_READER" REFCLSNAME="CX_DYNAMIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_NO_FILE_PATH" VERSION="1" LANGU="E" DESCRIPT="No file path error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_NO_FILE_PATH" CMPNAME="ZCX_NO_FILE_PATH" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="File name is empty"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_NO_FILE_PATH" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_WRONG_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Wrong file extension" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_WRONG_EXTENSION" CMPNAME="ZCX_WRONG_EXTENSION" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Wrong file extension"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_WRONG_EXTENSION" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_NOT_A_TABLE" VERSION="1" LANGU="E" DESCRIPT="That&apos;s... not a table" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_NOT_A_TABLE" CMPNAME="ZCX_NOT_A_TABLE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="That doesn&apos;t look like a table..."/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_NOT_A_TABLE" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_ERROR_READING_FILE" VERSION="1" LANGU="E" DESCRIPT="Error reading the file" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_ERROR_READING_FILE" CMPNAME="ZCX_ERROR_READING_FILE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Error reading the file"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_ERROR_READING_FILE" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
>>>>>>> origin/master
 </CLAS>
 <CLAS CLSNAME="ZCL_FILE_READER" VERSION="1" LANGU="E" DESCRIPT="File reader" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_FILE_READER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="CALL_CONVERSION_EXIT" VERSION="1" LANGU="E" DESCRIPT="Call conversion exit (self explanatory really...)" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CALL_CONVERSION_EXIT" SCONAME="IM_INPUT_FIELD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CALL_CONVERSION_EXIT" SCONAME="IM_CONVEXIT" VERSION="1" LANGU="E" DESCRIPT="Conversion Routine" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CONVEXIT"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CALL_CONVERSION_EXIT" SCONAME="EX_OUTPUT_FIELD" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>METHOD call_conversion_exit.

*  Just found out something interesting...
<<<<<<< HEAD
*  For conversion exit ALPHA
*  if the input field&apos;s contents are longer than the output
*  field&apos;s length, this fails miserably, so it needs to be
*  checked...
  IF im_convexit = &apos;ALPHA&apos;.
    DATA input_length TYPE i.
    input_length = strlen( im_input_field ).

    DATA elemdescr TYPE REF TO cl_abap_elemdescr.
    elemdescr ?= cl_abap_typedescr=&gt;describe_by_data( ex_output_field ).

    IF input_length &gt; elemdescr-&gt;output_length.
*    This can&apos;t be good
      RAISE EXCEPTION TYPE zcx_conversion_error.
    ENDIF.
=======
*  If the input field&apos;s contents are longer than the output
*  field&apos;s length, this fails miserably, so it needs to be
*  checked...
  DATA input_length TYPE i.
  input_length = strlen( im_input_field ).

  DATA elemdescr TYPE REF TO cl_abap_elemdescr.
  elemdescr ?= cl_abap_typedescr=&gt;describe_by_data( ex_output_field ).

  IF input_length &gt; elemdescr-&gt;output_length.
*    This can&apos;t be good
    RAISE EXCEPTION TYPE zcx_conversion_error.
>>>>>>> origin/master
  ENDIF.

*    Build function module name
  DATA fm_name TYPE string.
  CONCATENATE
    &apos;CONVERSION_EXIT_&apos;
    im_convexit
    &apos;_INPUT&apos;
  INTO fm_name.

  CALL FUNCTION fm_name
    EXPORTING
      input  = im_input_field
    IMPORTING
      output = ex_output_field.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="CONVERT_DATE_FIELD" VERSION="1" LANGU="E" DESCRIPT="Convert date from external to internal format" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CONVERT_DATE_FIELD" SCONAME="IM_DATE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CONVERT_DATE_FIELD" SCONAME="CH_DATE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>METHOD convert_date_field.

  CALL FUNCTION &apos;CONVERT_DATE_TO_INTERNAL&apos;
    EXPORTING
      date_external = im_date
    IMPORTING
      date_internal = ch_date
    EXCEPTIONS
      OTHERS        = 4.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
    RAISE EXCEPTION TYPE zcx_conversion_error.
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="CONVERT_EXT_TAB_2_INT" VERSION="1" LANGU="E" DESCRIPT="Convert external format table to internal format" EXPOSURE="0" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CONVERT_EXT_TAB_2_INT" SCONAME="IM_EXT_TABLE" VERSION="1" LANGU="E" DESCRIPT="External format table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CONVERT_EXT_TAB_2_INT" SCONAME="CH_INT_TABLE" VERSION="1" LANGU="E" DESCRIPT="Internal format table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 23.12.2014 (watching the PCA 2012 Super high roller)
* Description: First priority is the override BAdI, next up, we check
* if there&apos;s a conversion exit for the domain, if not, we use
* a conversion for the corresponding data type... text, number, or
* date.
**********************************************************************
METHOD convert_ext_tab_2_int.

*  Just in case, yes?
  CHECK im_ext_table IS NOT INITIAL.

  FIELD-SYMBOLS &lt;ext_line&gt; TYPE any.

  FIELD-SYMBOLS &lt;int_line&gt; TYPE any.
  DATA int_data_ref TYPE REF TO data.
  CREATE DATA int_data_ref LIKE LINE OF ch_int_table.
  ASSIGN int_data_ref-&gt;* TO &lt;int_line&gt;.

  DATA field_index TYPE syindex.
  FIELD-SYMBOLS &lt;ext_field&gt; TYPE any.
  FIELD-SYMBOLS &lt;int_field&gt; TYPE any.
  DATA typedescr TYPE REF TO cl_abap_typedescr.
  LOOP AT im_ext_table
    ASSIGNING &lt;ext_line&gt;.

    DO. &quot;An infinite loop??

      DATA fieldinfo TYPE dfies.
      CLEAR fieldinfo.

      field_index = sy-index.
      ASSIGN COMPONENT field_index OF STRUCTURE &lt;int_line&gt;
        TO &lt;int_field&gt;.
      IF sy-subrc &lt;&gt; 0.
        EXIT. &quot;Infinite loop averted! Phew!!
      ENDIF.

      ASSIGN COMPONENT field_index OF STRUCTURE &lt;ext_line&gt;
        TO &lt;ext_field&gt;.
      IF sy-subrc &lt;&gt; 0.
*          This should never fail...
        RAISE EXCEPTION TYPE zcx_fatal_error.
      ENDIF.

*        What type is this?
      typedescr = cl_abap_typedescr=&gt;describe_by_data( &lt;int_field&gt; ).

*        So, if there&apos;s a conversion routine, just use it
      TRY.
          DATA elemdescr TYPE REF TO cl_abap_elemdescr.
          elemdescr ?= typedescr.

          elemdescr-&gt;get_ddic_field(
            RECEIVING
              p_flddescr   = fieldinfo    &quot; Field Description
            EXCEPTIONS
              OTHERS       = 4
          ).
        CATCH cx_root.
*          No conversion exit? No problem
*           I&apos;m getting tired of these &quot;CATCH cx_root&quot;...
*           They&apos;re useless, don&apos;t catch anything!...
      ENDTRY.

*      Now, here, I want to give the developer the option
*      to override the conversion... I think using the
*      data element as filter is a good idea
      TRY.

          DATA conv_badi TYPE REF TO z_bd_file_reader_conv.
          GET BADI conv_badi
            FILTERS
              f_rollname = fieldinfo-rollname.
          CALL BADI conv_badi-&gt;convert_field
            EXPORTING
              im_value = &lt;ext_field&gt;    &quot; Unconverted value
            CHANGING
              ch_value = &lt;int_field&gt;.    &quot; Converted value
          CONTINUE.

        CATCH cx_badi_multiply_implemented.

*          This should abort the execution
          RAISE EXCEPTION TYPE zcx_fatal_error.

        CATCH cx_root.

*          Everything else should be A-OK

      ENDTRY.

      IF fieldinfo-convexit IS NOT INITIAL.

        call_conversion_exit(
          EXPORTING
            im_input_field = &lt;ext_field&gt;
            im_convexit = fieldinfo-convexit
          IMPORTING
            ex_output_field = &lt;int_field&gt; ).
        CONTINUE.

      ENDIF.

*      I thought it was also a good idea to put a BAdI
*      here, to allow a developer to implement a new
*      type if needed, because I didn&apos;t implement every
*      single one of them (yet)
      TRY.

          DATA type_badi TYPE REF TO z_bd_file_reader_type_conv.
          GET BADI type_badi
            FILTERS
              f_type = typedescr-&gt;type_kind.
          CALL BADI type_badi-&gt;convert_type
            EXPORTING
              im_value = &lt;ext_field&gt;
            CHANGING
              ch_value = &lt;int_field&gt;.

        CATCH cx_badi_multiply_implemented.

*          This should abort the execution
          RAISE EXCEPTION TYPE zcx_fatal_error.

        CATCH cx_root.

*          If it fails here, it&apos;s not being converted,
*          so it&apos;s a problem
          RAISE EXCEPTION TYPE zcx_conversion_error.

      ENDTRY.

    ENDDO.

    INSERT &lt;int_line&gt; INTO TABLE ch_int_table.
    CLEAR &lt;int_line&gt;.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" VERSION="1" LANGU="E" DESCRIPT="Create a char like table" EXPOSURE="0" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="IM_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="RE_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD create_char_like_table.

  DATA table_descr TYPE REF TO cl_abap_tabledescr.

*  This better not fail... otherwise you&apos;re a douche
  TRY.
      table_descr ?= cl_abap_tabledescr=&gt;describe_by_data( im_table ).
    CATCH cx_root.

      RAISE EXCEPTION TYPE zcx_not_a_table.

  ENDTRY.

  DATA struct_descr TYPE REF TO cl_abap_structdescr.
  struct_descr ?= table_descr-&gt;get_table_line_type( ).

  DATA components TYPE abap_component_tab.
  components = struct_descr-&gt;get_components( ).

*  Now... you may question my &quot;decision&quot; to use CHAR50...
*  So you know what? I&apos;ma put this in a BAdI
*  But this is the type used by FM ALSM_EXCEL_TO_INTERNAL_TABLE
  DATA char_ref TYPE REF TO cl_abap_typedescr.
  TRY.

      DATA badi_col_type TYPE REF TO z_bd_file_reader_col_type.
      GET BADI badi_col_type.
      CALL BADI badi_col_type-&gt;get_char_ref
        RECEIVING
          re_char_ref = char_ref.    &quot; Runtime Type Services

*    Catch multiple implementations... or no implementation at all
    CATCH cx_root.

      char_ref = cl_abap_elemdescr=&gt;describe_by_name( p_name = &apos;CHAR50&apos; ).

  ENDTRY.

  FIELD-SYMBOLS &lt;component&gt; LIKE LINE OF components.
  LOOP AT components ASSIGNING &lt;component&gt;.

    &lt;component&gt;-type ?= char_ref.

  ENDLOOP.

  struct_descr ?= cl_abap_structdescr=&gt;create(
      p_components = components
  ).

  table_descr = cl_abap_tabledescr=&gt;create(
      p_line_type  = struct_descr
  ).

  CREATE DATA re_table TYPE HANDLE table_descr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="DELETE_FIRST_ROWS" VERSION="1" LANGU="E" DESCRIPT="Delete first rows of the table" EXPOSURE="0" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="DELETE_FIRST_ROWS" SCONAME="IM_FIRST_ROW" VERSION="1" LANGU="E" DESCRIPT="Starting row of the table" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="DELETE_FIRST_ROWS" SCONAME="CH_TABLE" VERSION="1" LANGU="E" DESCRIPT="Data table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <source>METHOD delete_first_rows.

  CHECK im_first_row &gt; 1. &quot;Otherwise, what&apos;s the point?

  DATA row TYPE i.
  row = im_first_row - 1.

  DELETE ch_table FROM 1 TO row.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="GET_FILE_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Get file extension" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="GET_FILE_EXTENSION" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="GET_FILE_EXTENSION" SCONAME="RE_EXTENSION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD get_file_extension.

  DATA result TYPE TABLE OF string.
  SPLIT im_filename AT &apos;.&apos;
    INTO TABLE result.

  &quot;if only one line, abort mission
  IF lines( result ) &gt; 1.
    READ TABLE result INTO re_extension
      INDEX lines( result ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="PROMPT_FOR_FILE" VERSION="1" LANGU="E" DESCRIPT="Prompt for file" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="PROMPT_FOR_FILE" SCONAME="RE_FILENAME" VERSION="1" LANGU="E" DESCRIPT="File" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD prompt_for_file.

  DATA: lv_subrc TYPE sy-subrc,
        lt_filetable TYPE filetable,
        ls_filename TYPE file_table.

  cl_gui_frontend_services=&gt;file_open_dialog(
    EXPORTING
*      default_extension = &apos;.xls&apos;
      window_title      = &apos;Select File&apos;
*      default_filename  = &apos;*.xls&apos;
      multiselection    = &apos; &apos;
*      file_filter       = &apos;*.xls&apos;
    CHANGING
      file_table        = lt_filetable
      rc                = lv_subrc ).

  READ TABLE lt_filetable INTO ls_filename INDEX 1.

  CHECK sy-subrc = 0.
  re_filename = ls_filename-filename.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="READ_FILE" VERSION="1" LANGU="E" DESCRIPT="Read the file" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="READ_FILE" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="READ_FILE" SCONAME="IM_FIRST_ROW" VERSION="1" LANGU="E" DESCRIPT="First row number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="READ_FILE" SCONAME="IM_FIELD_SEPARATOR" VERSION="1" LANGU="E" DESCRIPT="Field separator for CSV files" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;;&apos;"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="READ_FILE" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <exception CLSNAME="ZCL_FILE_READER" CMPNAME="READ_FILE" SCONAME="ZCX_READER_NOT_IMPLEMENTED" VERSION="1" LANGU="E" DESCRIPT="File reader not implemented for this extension" MTDTYPE="0" EDITORDER="1 "/>
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 23.12.2014 (watching the end of Django)
**********************************************************************
METHOD read_file.

*  Prompt for file... if there&apos;s no file
  DATA filename TYPE string.
  IF im_filename IS NOT INITIAL.
    filename = im_filename.
  ELSE.
    filename = prompt_for_file( ).
  ENDIF.

*  NO FILE NAME???
  IF filename IS INITIAL.
    RAISE EXCEPTION TYPE zcx_no_file_path.
  ENDIF.

*  Let&apos;s get this baby&apos;s extention
  DATA extension TYPE string.
  extension = translate_to_upper( get_file_extension( filename ) ).

*  Whatever we&apos;re reading, we put it in a char like table
*  get char struct like table
  DATA char_table TYPE REF TO data.
  char_table = create_char_like_table(
    ch_table
  ).
  FIELD-SYMBOLS &lt;char_table&gt; TYPE table.
  ASSIGN char_table-&gt;* TO &lt;char_table&gt;.

*  And now the magic... a BAdI to implement different extension
*  readers?? Cool, right? :)
  DATA badi_execute TYPE REF TO z_bd_file_reader_execute.
  TRY.
      GET BADI badi_execute
        FILTERS
          f_extension = extension.
      CALL BADI badi_execute-&gt;read_file
        EXPORTING
          im_filename        = filename
          im_field_separator = im_field_separator
        CHANGING
          ch_table           = &lt;char_table&gt;.
    CATCH cx_root.
      RAISE EXCEPTION TYPE zcx_reader_not_implemented.
  ENDTRY.

*  Delete those first rows
  delete_first_rows(
    EXPORTING
      im_first_row = im_first_row    &quot; Starting row of the table
    CHANGING
      ch_table     = &lt;char_table&gt;    &quot; Data table
  ).

*  And the next piece of magic... converting from the &quot;external&quot;
*  char like table, to the table with the internal format
  convert_ext_tab_2_int(
    EXPORTING
      im_ext_table = &lt;char_table&gt;    &quot; External format table
    CHANGING
      ch_int_table = ch_table    &quot; Internal format table
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_FILE_READER" CMPNAME="TRANSLATE_TO_UPPER" VERSION="1" LANGU="E" DESCRIPT="Translate to upper case" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="TRANSLATE_TO_UPPER" SCONAME="IM_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_FILE_READER" CMPNAME="TRANSLATE_TO_UPPER" SCONAME="RE_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD translate_to_upper.

  re_string = im_string.
  TRANSLATE re_string TO UPPER CASE.

ENDMETHOD.</source>
  </method>
 </CLAS>
<<<<<<< HEAD
 <CLAS CLSNAME="ZCL_CSV_READER" VERSION="1" LANGU="E" DESCRIPT="Read a CSV file" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
=======
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_XLS" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_XLS" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_XLS" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_XLS" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 23.12.2014 (while watching the final table of the 2014 PCA
*                   Super High Roller)
**********************************************************************
METHOD z_if_file_reader_execute~read_file.

  DATA lr_xls_reader TYPE REF TO zcl_xls_reader.
  DATA localfile TYPE localfile.
  localfile = im_filename.

  TRY.
      lr_xls_reader = zcl_xls_reader=&gt;create_instance( localfile ).
    CATCH zcx_file_reader.
*      Just abort?
      EXIT.
  ENDTRY.

  lr_xls_reader-&gt;read_file(
    EXPORTING
      im_skip_first_line = im_skip_first_line
    CHANGING
      ch_table = ch_table
  ).

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCX_READER_NOT_IMPLEMENTED" VERSION="1" LANGU="E" DESCRIPT="File reader not implemented for this extension" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_READER_NOT_IMPLEMENTED" CMPNAME="ZCX_READER_NOT_IMPLEMENTED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="File reader not implemented for this extension"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_READER_NOT_IMPLEMENTED" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_FATAL_ERROR" VERSION="1" LANGU="E" DESCRIPT="Fatal error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_FATAL_ERROR" CMPNAME="ZCX_FATAL_ERROR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Fatal error"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_FATAL_ERROR" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCX_CONVERSION_ERROR" VERSION="1" LANGU="E" DESCRIPT="Field conversion error" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCX_FILE_READER">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_CONVERSION_ERROR" CMPNAME="ZCX_CONVERSION_ERROR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="Field conversion error"/>
   </sotr>
  </attribute>
  <inheritance CLSNAME="ZCX_CONVERSION_ERROR" REFCLSNAME="ZCX_FILE_READER" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_XLSX" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_XLSX" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_XLSX" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
>>>>>>> origin/master
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
<<<<<<< HEAD
  <typeUsage CLSNAME="ZCL_CSV_READER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_CSV_READER" CMPNAME="CSV_EXT" VERSION="1" LANGU="E" DESCRIPT="CSV extension" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;CSV&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_CSV_READER" CMPNAME="FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" VERSION="1" LANGU="E" DESCRIPT="Create char like table" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="IM_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="RE_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD CREATE_CHAR_LIKE_TABLE.
=======
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_XLSX" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 24.12.2014 (watching The Wolf of Wallstreet)
**********************************************************************
METHOD z_if_file_reader_execute~read_file.
>>>>>>> origin/master

  DATA excel TYPE REF TO zcl_excel.
  DATA reader TYPE REF TO zif_excel_reader.

  TRY .

      CREATE OBJECT reader TYPE zcl_excel_reader_2007.

      excel = reader-&gt;load_file( im_filename ).

*  Get the active worksheet
      DATA:
            worksheet      TYPE REF TO zcl_excel_worksheet,
            highest_column TYPE zexcel_cell_column,
            highest_row    TYPE int4,
            column         TYPE zexcel_cell_column VALUE 1,
            col_str        TYPE zexcel_cell_column_alpha,
            row            TYPE int4               VALUE 1,
            value          TYPE zexcel_cell_value.
      IF im_skip_first_line = abap_true.
        ADD 1 TO row.
      ENDIF.

      worksheet = excel-&gt;get_active_worksheet( ).
      highest_column = worksheet-&gt;get_highest_column( ).
      highest_row    = worksheet-&gt;get_highest_row( ).

*  Let&apos;s get a pointer to a line of the char like table, shall we?
      DATA line_ref TYPE REF TO data.
      CREATE DATA line_ref LIKE LINE OF ch_table.
      FIELD-SYMBOLS &lt;output_line&gt; TYPE any.
      ASSIGN line_ref-&gt;* TO &lt;output_line&gt;.

      FIELD-SYMBOLS &lt;output_field&gt; TYPE any.

      WHILE row &lt;= highest_row.
        WHILE column &lt;= highest_column.

          ASSIGN COMPONENT column OF STRUCTURE &lt;output_line&gt; TO &lt;output_field&gt;.
          IF sy-subrc &lt;&gt; 0.
*        Should we ignore this?? I think so!!
*        RAISE EXCEPTION TYPE zcx_fatal_error.
            EXIT.
          ENDIF.
          col_str = zcl_excel_common=&gt;convert_column2alpha( column ).
          worksheet-&gt;get_cell(
            EXPORTING
              ip_column = col_str
              ip_row    = row
            IMPORTING
              ep_value = value
          ).
          &lt;output_field&gt; = value.
          column = column + 1.
        ENDWHILE.
        column = 1.
        row = row + 1.
        INSERT &lt;output_line&gt; INTO TABLE ch_table.
        CLEAR &lt;output_line&gt;.
      ENDWHILE.

    CATCH zcx_excel.
*        What to do??
      CLEAR ch_table.
  ENDTRY.


ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_CSV" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_CSV" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_CSV" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_CSV" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 28.12.2014
**********************************************************************
METHOD z_if_file_reader_execute~read_file.

  DATA lr_csv_reader TYPE REF TO zcl_csv_reader.
  DATA localfile TYPE string.
  lr_csv_reader = zcl_csv_reader=&gt;create_instance( im_filename ).
*    CATCH zcx_no_file_path.  &quot; No file path error
*    CATCH zcx_wrong_extension.  &quot; Wrong file extension

  lr_csv_reader-&gt;read_file(
    EXPORTING
      im_skip_first_line = im_skip_first_line
      im_field_separator = im_field_separator
    CHANGING
      ch_table = ch_table
  ).

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="ZCL_CSV_READER" VERSION="1" LANGU="E" DESCRIPT="Read a CSV file" CATEGORY="00" EXPOSURE="0" STATE="1" RELEASE="0" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_CSV_READER" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_CSV_READER" CMPNAME="CSV_EXT" VERSION="1" LANGU="E" DESCRIPT="CSV extension" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;CSV&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_CSV_READER" CMPNAME="FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" VERSION="1" LANGU="E" DESCRIPT="Create char like table" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="IM_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_CHAR_LIKE_TABLE" SCONAME="RE_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
   <source>METHOD CREATE_CHAR_LIKE_TABLE.

  DATA table_descr TYPE REF TO cl_abap_tabledescr.

*  This better not fail... otherwise you&apos;re a douche
  TRY.
      table_descr ?= cl_abap_tabledescr=&gt;describe_by_data( im_table ).
    CATCH cx_root.

      RAISE EXCEPTION TYPE zcx_not_a_table.

  ENDTRY.

  DATA struct_descr TYPE REF TO cl_abap_structdescr.
  struct_descr ?= table_descr-&gt;get_table_line_type( ).

  DATA components TYPE abap_component_tab.
  components = struct_descr-&gt;get_components( ).

*  Now... you may question my &quot;decision&quot; to use CHAR50...
*  So you know what? I&apos;ma put this in a BAdI
*  But this is the type used by FM ALSM_EXCEL_TO_INTERNAL_TABLE
  DATA char_ref TYPE REF TO cl_abap_typedescr.
  TRY.

      DATA badi_col_type TYPE REF TO z_bd_file_reader_col_type.
      GET BADI badi_col_type.
      CALL BADI badi_col_type-&gt;get_char_ref
        RECEIVING
          re_char_ref = char_ref.    &quot; Runtime Type Services

*    Catch multiple implementations... or no implementation at all
    CATCH cx_root.

      char_ref = cl_abap_elemdescr=&gt;describe_by_name( p_name = &apos;CHAR50&apos; ).

  ENDTRY.

  FIELD-SYMBOLS &lt;component&gt; LIKE LINE OF components.
  LOOP AT components ASSIGNING &lt;component&gt;.

    &lt;component&gt;-type ?= char_ref.

  ENDLOOP.

  struct_descr ?= cl_abap_structdescr=&gt;create(
      p_components = components
  ).

  table_descr = cl_abap_tabledescr=&gt;create(
      p_line_type  = struct_descr
  ).

  CREATE DATA re_table TYPE HANDLE table_descr.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_INSTANCE" VERSION="1" LANGU="E" DESCRIPT="Create an instance of the reader" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_INSTANCE" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" DESCRIPT="File name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_INSTANCE" SCONAME="RE_CSV_READER" VERSION="1" LANGU="E" DESCRIPT="Read a CSV file" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="ZCL_CSV_READER"/>
   <exception CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_INSTANCE" SCONAME="ZCX_NO_FILE_PATH" VERSION="1" LANGU="E" DESCRIPT="No file path error" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_CSV_READER" CMPNAME="CREATE_INSTANCE" SCONAME="ZCX_WRONG_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Wrong file extension" MTDTYPE="0" EDITORDER="2 "/>
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 19.12.2014 (at Frankfurt Intl Airport, not even kidding)
**********************************************************************
METHOD create_instance.

  CREATE OBJECT re_csv_reader.

  IF im_filename IS INITIAL.

    DATA: lv_subrc TYPE sy-subrc,
          lt_filetable TYPE filetable,
          ls_filename TYPE file_table.

    cl_gui_frontend_services=&gt;file_open_dialog(
      EXPORTING
        default_extension = &apos;.csv&apos;
        window_title      = &apos;Select File&apos;
        default_filename  = &apos;*.csv&apos;
        multiselection    = &apos; &apos;
        file_filter       = &apos;*.csv&apos;
      CHANGING
        file_table        = lt_filetable
        rc                = lv_subrc ).

    READ TABLE lt_filetable INTO ls_filename INDEX 1.

    re_csv_reader-&gt;filename = ls_filename-filename.

  ELSE.

    re_csv_reader-&gt;filename = im_filename.

  ENDIF.

  IF re_csv_reader-&gt;filename IS INITIAL.

    RAISE EXCEPTION TYPE zcx_no_file_path.

  ENDIF.

  DATA filename_str TYPE string.
  filename_str = re_csv_reader-&gt;filename.
  IF zcl_csv_reader=&gt;translate_to_upper( zcl_csv_reader=&gt;get_file_extension( filename_str ) ) &lt;&gt; zcl_csv_reader=&gt;csv_ext.

    RAISE EXCEPTION TYPE zcx_wrong_extension.

  ENDIF.

ENDMETHOD.</source>
   <methodDocumentation OBJECT="ZCL_CSV_READER                CREATE_INSTANCE">
    <language SPRAS="E">
     <textLine TDFORMAT="U1" TDLINE="&amp;FUNCTIONALITY&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="This creates an instance of the XLS reader."/>
     <textLine TDFORMAT="U1" TDLINE="&amp;PRECONDITION&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="No precondition really..."/>
     <textLine TDFORMAT="U1" TDLINE="&amp;RESULT&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="You get an instance of the XLS reader!"/>
     <textLine TDFORMAT="U1" TDLINE="&amp;PARAMETERS&amp;"/>
     <textLine TDFORMAT="AS" TDLINE="Importing parameter im_filename is optional. If it is not provided, the"/>
     <textLine TDLINE="user will be prompted for a file to upload."/>
     <textLine TDFORMAT="U1" TDLINE="&amp;EXCEPTIONS&amp;"/>
     <textLine TDFORMAT="AS"/>
     <textLine TDFORMAT="U1" TDLINE="&amp;HINTS&amp;"/>
     <textLine TDFORMAT="AS"/>
    </language>
   </methodDocumentation>
  </method>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="GET_FILE_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Get file extension" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="GET_FILE_EXTENSION" SCONAME="IV_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Filename" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="GET_FILE_EXTENSION" SCONAME="RV_EXTENSION" VERSION="1" LANGU="E" DESCRIPT="Extension" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD GET_FILE_EXTENSION.

  DATA lt_result TYPE TABLE OF string.
  SPLIT iv_filename AT &apos;.&apos;
    INTO TABLE lt_result.

  &quot;if only one line, abort mission
  IF lines( lt_result ) &gt; 1.
    READ TABLE lt_result INTO rv_extension
      INDEX lines( lt_result ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" VERSION="1" LANGU="E" DESCRIPT="Populate the char table from excel" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" DESCRIPT="Local file for upload/download" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="IM_SKIP_FIRST_LINE" VERSION="1" LANGU="E" DESCRIPT="Skip first line" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="IM_FIELD_SEPARATOR" VERSION="1" LANGU="E" DESCRIPT="Field separator for CSV file" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;;&apos;"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="POPULATE_TAB_FROM_EXCEL" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <source>METHOD populate_tab_from_excel.

  DATA lt_raw TYPE truxs_t_text_data.

  CALL FUNCTION &apos;GUI_UPLOAD&apos;
    EXPORTING
      filename = im_filename
    TABLES
      data_tab = lt_raw
    EXCEPTIONS
      OTHERS   = 4.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
    RAISE EXCEPTION TYPE zcx_fatal_error.
  ENDIF.

  CALL FUNCTION &apos;TEXT_CONVERT_CSV_TO_SAP&apos;
    EXPORTING
      i_field_seperator    = im_field_separator
      i_line_header        = im_skip_first_line
      i_tab_raw_data       = lt_raw
    TABLES
      i_tab_converted_data = ch_table
    EXCEPTIONS
      OTHERS               = 4.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="READ_FILE" VERSION="1" LANGU="E" DESCRIPT="Read the xls file" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="READ_FILE" SCONAME="IM_SKIP_FIRST_LINE" VERSION="1" LANGU="E" DESCRIPT="Skip first line" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="READ_FILE" SCONAME="IM_FIELD_SEPARATOR" VERSION="1" LANGU="E" DESCRIPT="Field separator for CSV file" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;;&apos;"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="READ_FILE" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 23.12.2014 (while watching Thor... I had seen it already)
**********************************************************************
METHOD read_file.

*  clear the table, just in case
  CLEAR ch_table.

  me-&gt;populate_tab_from_excel(
    EXPORTING
      im_filename = me-&gt;filename    &quot; Local file for upload/download
      im_skip_first_line = im_skip_first_line
      im_field_separator = im_field_separator
    CHANGING
      ch_table    = ch_table
  ).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_CSV_READER" CMPNAME="TRANSLATE_TO_UPPER" VERSION="1" LANGU="E" DESCRIPT="Translate to upper case" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="TRANSLATE_TO_UPPER" SCONAME="IM_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_CSV_READER" CMPNAME="TRANSLATE_TO_UPPER" SCONAME="RE_STRING" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD TRANSLATE_TO_UPPER.

  re_string = im_string.
  TRANSLATE re_string TO UPPER CASE.

ENDMETHOD.</source>
  </method>
 </CLAS>
<<<<<<< HEAD
 <CLAS CLSNAME="Z_CL_FILE_READER_EXECUTE_XML" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_EXECUTE_XML" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_EXECUTE_XML" REFCLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
=======
 <CLAS CLSNAME="Z_CL_FILE_READER_CONV_DATE" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_CONV_DATE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_CONV_DATE" REFCLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
>>>>>>> origin/master
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
<<<<<<< HEAD
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_EXECUTE_XML" CPDNAME="Z_IF_FILE_READER_EXECUTE~READ_FILE">
   <source>**********************************************************************
* Author: Bruno Esperança
* Date: 25.01.2015 (watching EPT 10 final event)
**********************************************************************
METHOD z_if_file_reader_execute~read_file.

  DATA file_length TYPE i.
  DATA xml_data_tab TYPE truxs_xml_table.
  CALL FUNCTION &apos;GUI_UPLOAD&apos;
    EXPORTING
      filename   = im_filename
      filetype   = &apos;BIN&apos;
    IMPORTING
      filelength = file_length
    TABLES
      data_tab   = xml_data_tab
    EXCEPTIONS
      OTHERS     = 4.
  IF sy-subrc &lt;&gt; 0.
    RETURN.
* Implement suitable error handling here
  ENDIF.

  CALL FUNCTION &apos;TEXT_CONVERT_XML_TO_SAP&apos;
    EXPORTING
      i_tab_raw_data       = xml_data_tab
      i_totalsize          = file_length
    TABLES
      i_tab_converted_data = ch_table
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
*    What should we do?
=======
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_CONV_DATE" CPDNAME="Z_IF_FILE_READER_TYPE_CONV~CONVERT_TYPE">
   <source>METHOD z_if_file_reader_type_conv~convert_type.

*  Credits for this go to Luís Rocha, greatest
*  Abapper alive

  DATA:
        len_date      TYPE i,
        inv_date(10)  TYPE c,
        int_date      TYPE sydatum.

  inv_date = im_value.

  len_date = strlen( inv_date ).
  IF len_date = 8.

*   Check AAAAMMDD format
    int_date = inv_date.
    CALL FUNCTION &apos;DATE_CHECK_PLAUSIBILITY&apos;
      EXPORTING
        date                      = int_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc &lt;&gt; 0.

*     Check format DDMMAAAA
      CONCATENATE inv_date+4(4) inv_date+2(2) inv_date+0(2)
        INTO inv_date.
      int_date = inv_date.
      CALL FUNCTION &apos;DATE_CHECK_PLAUSIBILITY&apos;
        EXPORTING
          date                      = int_date
        EXCEPTIONS
          plausibility_check_failed = 1
          OTHERS                    = 2.
      IF sy-subrc &lt;&gt; 0.
        RAISE EXCEPTION TYPE zcx_conversion_error.
      ENDIF.
    ENDIF.
  ELSE.
    IF inv_date+2(1) NA &apos;0123456789&apos;.

*     Format DD-MM-AAAA
      inv_date+2(1) = space.
      inv_date+5(1) = space.
      CONDENSE inv_date NO-GAPS.
      CONCATENATE inv_date+4(4) inv_date+2(2) inv_date+0(2)
        INTO inv_date.
    ELSE.

*     Format AAAA-MM-DD
      inv_date+4(1) = space.
      inv_date+7(1) = space.
      CONDENSE inv_date NO-GAPS.
    ENDIF.
    int_date = inv_date.
    CALL FUNCTION &apos;DATE_CHECK_PLAUSIBILITY&apos;
      EXPORTING
        date                      = int_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc &lt;&gt; 0.
      RAISE EXCEPTION TYPE zcx_conversion_error.
    ENDIF.
  ENDIF.

  ch_value = inv_date.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_CONV_TEXT" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI: Z_BD_FILE_READER_TYPE_CONV" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_CONV_TEXT" REFCLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_CONV_TEXT" CPDNAME="Z_IF_FILE_READER_TYPE_CONV~CONVERT_TYPE">
   <source>METHOD z_if_file_reader_type_conv~convert_type.

*  Genius, isn&apos;t it?
  ch_value = im_value.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
 <CLAS CLSNAME="Z_CL_FILE_READER_CONV_NUMBER" VERSION="1" LANGU="E" DESCRIPT="Class for BAdI Impl.: Z_BI_FILE_READER_CONV_NUMBER" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
  <implementing CLSNAME="Z_CL_FILE_READER_CONV_NUMBER" REFCLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="Z_CL_FILE_READER_CONV_NUMBER" CPDNAME="Z_IF_FILE_READER_TYPE_CONV~CONVERT_TYPE">
   <source>METHOD z_if_file_reader_type_conv~convert_type.

  CALL FUNCTION &apos;MOVE_CHAR_TO_NUM&apos;
    EXPORTING
      chr    = im_value
    IMPORTING
      num    = ch_value
    EXCEPTIONS
      OTHERS = 4.
  IF sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
    RAISE EXCEPTION TYPE zcx_conversion_error.
>>>>>>> origin/master
  ENDIF.

ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
<<<<<<< HEAD
 <INTF CLSNAME="Z_IF_FILE_READER_CONV" VERSION="1" LANGU="E" DESCRIPT="Interface for BAdI: Z_BD_FILE_READER_CONV" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="Z_IF_FILE_READER_CONV" REFCLSNAME="IF_BADI_INTERFACE" VERSION="1" STATE="1"/>
  <method CLSNAME="Z_IF_FILE_READER_CONV" CMPNAME="CONVERT_FIELD" VERSION="1" LANGU="E" DESCRIPT="Convert field based on rollname" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="Z_IF_FILE_READER_CONV" CMPNAME="CONVERT_FIELD" SCONAME="IM_VALUE" VERSION="1" LANGU="E" DESCRIPT="Unconverted value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="Z_IF_FILE_READER_CONV" CMPNAME="CONVERT_FIELD" SCONAME="CH_VALUE" VERSION="1" LANGU="E" DESCRIPT="Converted value" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
=======
 <INTF CLSNAME="Z_IF_FILE_READER_COL_TYPE" VERSION="1" LANGU="E" DESCRIPT="Interface for BAdI: Z_BD_FILE_READER_COL_TYPE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="Z_IF_FILE_READER_COL_TYPE" REFCLSNAME="IF_BADI_INTERFACE" VERSION="1" STATE="1"/>
  <method CLSNAME="Z_IF_FILE_READER_COL_TYPE" CMPNAME="GET_CHAR_REF" VERSION="1" LANGU="E" DESCRIPT="Get char ref for the field type you want to use" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="Z_IF_FILE_READER_COL_TYPE" CMPNAME="GET_CHAR_REF" SCONAME="RE_CHAR_REF" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR"/>
>>>>>>> origin/master
  </method>
 </INTF>
 <INTF CLSNAME="Z_IF_FILE_READER_EXECUTE" VERSION="1" LANGU="E" DESCRIPT="Interface for BAdI: Z_BD_FILE_READER_EXECUTE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="Z_IF_FILE_READER_EXECUTE" REFCLSNAME="IF_BADI_INTERFACE" VERSION="1" STATE="1"/>
  <typeUsage CLSNAME="Z_IF_FILE_READER_EXECUTE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <method CLSNAME="Z_IF_FILE_READER_EXECUTE" CMPNAME="READ_FILE" VERSION="1" LANGU="E" DESCRIPT="Read the file" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="Z_IF_FILE_READER_EXECUTE" CMPNAME="READ_FILE" SCONAME="IM_FILENAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="Z_IF_FILE_READER_EXECUTE" CMPNAME="READ_FILE" SCONAME="IM_FIELD_SEPARATOR" VERSION="1" LANGU="E" DESCRIPT="Field separator for CSV file" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;;&apos;"/>
   <parameter CLSNAME="Z_IF_FILE_READER_EXECUTE" CMPNAME="READ_FILE" SCONAME="CH_TABLE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TABLE"/>
  </method>
 </INTF>
 <INTF CLSNAME="Z_IF_FILE_READER_TYPE_CONV" VERSION="1" LANGU="E" DESCRIPT="Interface for BAdI: Z_BD_FILE_READER_TYPE_CONV" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="Z_IF_FILE_READER_TYPE_CONV" REFCLSNAME="IF_BADI_INTERFACE" VERSION="1" STATE="1"/>
  <method CLSNAME="Z_IF_FILE_READER_TYPE_CONV" CMPNAME="CONVERT_TYPE" VERSION="1" LANGU="E" DESCRIPT="Convert a type" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="Z_IF_FILE_READER_TYPE_CONV" CMPNAME="CONVERT_TYPE" SCONAME="IM_VALUE" VERSION="1" LANGU="E" DESCRIPT="importing value" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="Z_IF_FILE_READER_TYPE_CONV" CMPNAME="CONVERT_TYPE" SCONAME="CH_VALUE" VERSION="1" LANGU="E" DESCRIPT="changing value" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
  </method>
 </INTF>
 <INTF CLSNAME="Z_IF_FILE_READER_COL_TYPE" VERSION="1" LANGU="E" DESCRIPT="Interface for BAdI: Z_BD_FILE_READER_COL_TYPE" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" UNICODE="X">
  <include CLSNAME="Z_IF_FILE_READER_COL_TYPE" REFCLSNAME="IF_BADI_INTERFACE" VERSION="1" STATE="1"/>
  <method CLSNAME="Z_IF_FILE_READER_COL_TYPE" CMPNAME="GET_CHAR_REF" VERSION="1" LANGU="E" DESCRIPT="Get char ref for the field type you want to use" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="Z_IF_FILE_READER_COL_TYPE" CMPNAME="GET_CHAR_REF" SCONAME="RE_CHAR_REF" VERSION="1" LANGU="E" DESCRIPT="Runtime Type Services" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="CL_ABAP_TYPEDESCR"/>
  </method>
 </INTF>
 </nugget>
